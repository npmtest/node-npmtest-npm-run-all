{"/home/travis/build/npmtest/node-npmtest-npm-run-all/test.js":"/* istanbul instrument in package npmtest_npm_run_all */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-run-all/lib.npmtest_npm_run_all.js":"/* istanbul instrument in package npmtest_npm_run_all */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_npm_run_all = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_npm_run_all = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-run-all/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-npm-run-all && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_npm_run_all */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_npm_run_all\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_npm_run_all.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_npm_run_all.rollup.js'] =\n            local.assetsDict['/assets.npmtest_npm_run_all.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_npm_run_all.__dirname + '/lib.npmtest_npm_run_all.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-npm-run-all/node_modules/npm-run-all/lib/index.js":"/**\n * @module index\n * @author Toru Nagashima\n * @copyright 2015 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n\"use strict\"\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst shellQuote = require(\"shell-quote\")\nconst matchTasks = require(\"./match-tasks\")\nconst readPackageJson = require(\"./read-package-json\")\nconst runTasks = require(\"./run-tasks\")\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst ARGS_PATTERN = /\\{(!)?([*@]|\\d+)([^}]+)?}/g\n\n/**\n * Converts a given value to an array.\n *\n * @param {string|string[]|null|undefined} x - A value to convert.\n * @returns {string[]} An array.\n */\nfunction toArray(x) {\n    if (x == null) {\n        return []\n    }\n    return Array.isArray(x) ? x : [x]\n}\n\n/**\n * Replaces argument placeholders (such as `{1}`) by arguments.\n *\n * @param {string[]} patterns - Patterns to replace.\n * @param {string[]} args - Arguments to replace.\n * @returns {string[]} replaced\n */\nfunction applyArguments(patterns, args) {\n    const defaults = Object.create(null)\n\n    return patterns.map(pattern => pattern.replace(ARGS_PATTERN, (whole, indirectionMark, id, options) => {\n        if (indirectionMark != null) {\n            throw Error(`Invalid Placeholder: ${whole}`)\n        }\n        if (id === \"@\") {\n            return shellQuote.quote(args)\n        }\n        if (id === \"*\") {\n            return shellQuote.quote([args.join(\" \")])\n        }\n\n        const position = parseInt(id, 10)\n        if (position >= 1 && position <= args.length) {\n            return shellQuote.quote([args[position - 1]])\n        }\n\n        // Address default values\n        if (options != null) {\n            const prefix = options.slice(0, 2)\n\n            if (prefix === \":=\") {\n                defaults[id] = shellQuote.quote([options.slice(2)])\n                return defaults[id]\n            }\n            if (prefix === \":-\") {\n                return shellQuote.quote([options.slice(2)])\n            }\n\n            throw Error(`Invalid Placeholder: ${whole}`)\n        }\n        if (defaults[id] != null) {\n            return defaults[id]\n        }\n\n        return \"\"\n    }))\n}\n\n/**\n * Parse patterns.\n * In parsing process, it replaces argument placeholders (such as `{1}`) by arguments.\n *\n * @param {string|string[]} patternOrPatterns - Patterns to run.\n *      A pattern is a npm-script name or a Glob-like pattern.\n * @param {string[]} args - Arguments to replace placeholders.\n * @returns {string[]} Parsed patterns.\n */\nfunction parsePatterns(patternOrPatterns, args) {\n    const patterns = toArray(patternOrPatterns)\n    const hasPlaceholder = patterns.some(pattern => ARGS_PATTERN.test(pattern))\n\n    return hasPlaceholder ? applyArguments(patterns, args) : patterns\n}\n\n/**\n * Converts a given config object to an `--:=` style option array.\n *\n * @param {object|null} config -\n *   A map-like object to overwrite package configs.\n *   Keys are package names.\n *   Every value is a map-like object (Pairs of variable name and value).\n * @returns {string[]} `--:=` style options.\n */\nfunction toOverwriteOptions(config) {\n    const options = []\n\n    Object.keys(config).forEach(packageName => {\n        const packageConfig = config[packageName]\n\n        Object.keys(packageConfig).forEach(variableName => {\n            const value = packageConfig[variableName]\n\n            options.push(`--${packageName}:${variableName}=${value}`)\n        })\n    })\n\n    return options\n}\n\n/**\n * Converts a given config object to an `--a=b` style option array.\n *\n * @param {object|null} config -\n *   A map-like object to set configs.\n * @returns {string[]} `--a=b` style options.\n */\nfunction toConfigOptions(config) {\n    return Object.keys(config).map(key => `--${key}=${config[key]}`)\n}\n\n/**\n * Gets the maximum length.\n *\n * @param {number} length - The current maximum length.\n * @param {string} name - A name.\n * @returns {number} The maximum length.\n */\nfunction maxLength(length, name) {\n    return Math.max(name.length, length)\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * Runs npm-scripts which are matched with given patterns.\n *\n * @param {string|string[]} patternOrPatterns - Patterns to run.\n *   A pattern is a npm-script name or a Glob-like pattern.\n * @param {object|undefined} [options] Optional.\n * @param {boolean} options.parallel -\n *   If this is `true`, run scripts in parallel.\n *   Otherwise, run scripts in sequencial.\n *   Default is `false`.\n * @param {stream.Readable|null} options.stdin -\n *   A readable stream to send messages to stdin of child process.\n *   If this is `null`, ignores it.\n *   If this is `process.stdin`, inherits it.\n *   Otherwise, makes a pipe.\n *   Default is `null`.\n * @param {stream.Writable|null} options.stdout -\n *   A writable stream to receive messages from stdout of child process.\n *   If this is `null`, cannot send.\n *   If this is `process.stdout`, inherits it.\n *   Otherwise, makes a pipe.\n *   Default is `null`.\n * @param {stream.Writable|null} options.stderr -\n *   A writable stream to receive messages from stderr of child process.\n *   If this is `null`, cannot send.\n *   If this is `process.stderr`, inherits it.\n *   Otherwise, makes a pipe.\n *   Default is `null`.\n * @param {string[]} options.taskList -\n *   Actual name list of npm-scripts.\n *   This function search npm-script names in this list.\n *   If this is `null`, this function reads `package.json` of current directly.\n * @param {object|null} options.packageConfig -\n *   A map-like object to overwrite package configs.\n *   Keys are package names.\n *   Every value is a map-like object (Pairs of variable name and value).\n *   e.g. `{\"npm-run-all\": {\"test\": 777}}`\n *   Default is `null`.\n * @param {boolean} options.silent -\n *   The flag to set `silent` to the log level of npm.\n *   Default is `false`.\n * @param {boolean} options.continueOnError -\n *   The flag to ignore errors.\n *   Default is `false`.\n * @param {boolean} options.printLabel -\n *   The flag to print task names at the head of each line.\n *   Default is `false`.\n * @param {boolean} options.printName -\n *   The flag to print task names before running each task.\n *   Default is `false`.\n * @param {number} options.maxParallel -\n *   The maximum number of parallelism.\n *   Default is unlimited.\n * @param {string} options.npmPath -\n *   The path to npm.\n *   Default is `process.env.npm_execpath`.\n * @returns {Promise}\n *   A promise object which becomes fullfilled when all npm-scripts are completed.\n */\nmodule.exports = function npmRunAll(patternOrPatterns, options) {\n    const stdin = (options && options.stdin) || null\n    const stdout = (options && options.stdout) || null\n    const stderr = (options && options.stderr) || null\n    const taskList = (options && options.taskList) || null\n    const config = (options && options.config) || null\n    const packageConfig = (options && options.packageConfig) || null\n    const args = (options && options.arguments) || []\n    const parallel = Boolean(options && options.parallel)\n    const silent = Boolean(options && options.silent)\n    const continueOnError = Boolean(options && options.continueOnError)\n    const printLabel = Boolean(options && options.printLabel)\n    const printName = Boolean(options && options.printName)\n    const race = Boolean(options && options.race)\n    const maxParallel = parallel ? ((options && options.maxParallel) || 0) : 1\n    const npmPath = options && options.npmPath\n    try {\n        const patterns = parsePatterns(patternOrPatterns, args)\n        if (patterns.length === 0) {\n            return Promise.resolve(null)\n        }\n        if (taskList != null && Array.isArray(taskList) === false) {\n            throw new Error(\"Invalid options.taskList\")\n        }\n        if (typeof maxParallel !== \"number\" || !(maxParallel >= 0)) {\n            throw new Error(\"Invalid options.maxParallel\")\n        }\n        if (!parallel && race) {\n            throw new Error(\"Invalid options.race\")\n        }\n\n        const prefixOptions = [].concat(\n            silent ? [\"--silent\"] : [],\n            packageConfig ? toOverwriteOptions(packageConfig) : [],\n            config ? toConfigOptions(config) : []\n        )\n\n        return Promise.resolve()\n            .then(() => {\n                if (taskList != null) {\n                    return {taskList, packageInfo: null}\n                }\n                return readPackageJson()\n            })\n            .then(x => {\n                const tasks = matchTasks(x.taskList, patterns)\n                const labelWidth = tasks.reduce(maxLength, 0)\n\n                return runTasks(tasks, {\n                    stdin,\n                    stdout,\n                    stderr,\n                    prefixOptions,\n                    continueOnError,\n                    labelState: {\n                        enabled: printLabel,\n                        width: labelWidth,\n                        lastPrefix: null,\n                        lastIsLinebreak: true,\n                    },\n                    printName,\n                    packageInfo: x.packageInfo,\n                    race,\n                    maxParallel,\n                    npmPath,\n                })\n            })\n    }\n    catch (err) {\n        return Promise.reject(new Error(err.message))\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-npm-run-all/node_modules/npm-run-all/lib/match-tasks.js":"/**\n * @module match-tasks\n * @author Toru Nagashima\n * @copyright 2015 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n\"use strict\"\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst Minimatch = require(\"minimatch\").Minimatch\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst COLON_OR_SLASH = /[:/]/g\nconst CONVERT_MAP = {\":\": \"/\", \"/\": \":\"}\n\n/**\n * Swaps \":\" and \"/\", in order to use \":\" as the separator in minimatch.\n *\n * @param {string} s - A text to swap.\n * @returns {string} The text which was swapped.\n */\nfunction swapColonAndSlash(s) {\n    return s.replace(COLON_OR_SLASH, (matched) => CONVERT_MAP[matched])\n}\n\n/**\n * Creates a filter from user-specified pattern text.\n *\n * The task name is the part until the first space.\n * The rest part is the arguments for this task.\n *\n * @param {string} pattern - A pattern to create filter.\n * @returns {{match: function, task: string, args: string}} The filter object of the pattern.\n */\nfunction createFilter(pattern) {\n    const trimmed = pattern.trim()\n    const spacePos = trimmed.indexOf(\" \")\n    const task = spacePos < 0 ? trimmed : trimmed.slice(0, spacePos)\n    const args = spacePos < 0 ? \"\" : trimmed.slice(spacePos)\n    const matcher = new Minimatch(swapColonAndSlash(task))\n    const match = matcher.match.bind(matcher)\n\n    return {match, task, args}\n}\n\n/**\n * The set to remove overlapped task.\n */\nclass TaskSet {\n    /**\n     * Creates a instance.\n     */\n    constructor() {\n        this.result = []\n        this.sourceMap = Object.create(null)\n    }\n\n    /**\n     * Adds a command (a pattern) into this set if it's not overlapped.\n     * \"Overlapped\" is meaning that the command was added from a different source.\n     *\n     * @param {string} command - A pattern text to add.\n     * @param {string} source - A task name to check.\n     * @returns {void}\n     */\n    add(command, source) {\n        const sourceList = this.sourceMap[command] || (this.sourceMap[command] = [])\n        if (sourceList.length === 0 || sourceList.indexOf(source) !== -1) {\n            this.result.push(command)\n        }\n        sourceList.push(source)\n    }\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * Enumerates tasks which matches with given patterns.\n *\n * @param {string[]} taskList - A list of actual task names.\n * @param {string[]} patterns - Pattern texts to match.\n * @returns {string[]} Tasks which matches with the patterns.\n * @private\n */\nmodule.exports = function matchTasks(taskList, patterns) {\n    const filters = patterns.map(createFilter)\n    const candidates = taskList.map(swapColonAndSlash)\n    const taskSet = new TaskSet()\n    const unknownSet = Object.create(null)\n\n    // Take tasks while keep the order of patterns.\n    filters.forEach(filter => {\n        let found = false\n\n        candidates.forEach(candidate => {\n            if (filter.match(candidate)) {\n                found = true\n                taskSet.add(\n                    swapColonAndSlash(candidate) + filter.args,\n                    filter.task\n                )\n            }\n        })\n\n        // Built-in tasks should be allowed.\n        if (!found && (filter.task === \"restart\" || filter.task === \"env\")) {\n            taskSet.add(filter.task + filter.args, filter.task)\n            found = true\n        }\n        if (!found) {\n            unknownSet[filter.task] = true\n        }\n    })\n\n    const unknownTasks = Object.keys(unknownSet)\n    if (unknownTasks.length > 0) {\n        throw new Error(`Task not found: \"${unknownTasks.join(\"\\\", \")}\"`)\n    }\n    return taskSet.result\n}\n","/home/travis/build/npmtest/node-npmtest-npm-run-all/node_modules/npm-run-all/lib/read-package-json.js":"/**\n * @module read-package-json\n * @author Toru Nagashima\n * @copyright 2016 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n\"use strict\"\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst joinPath = require(\"path\").join\nconst readPkg = require(\"read-pkg\")\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * Reads the package.json in the current directory.\n *\n * @returns {object} package.json's information.\n */\nmodule.exports = function readPackageJson() {\n    const path = joinPath(process.cwd(), \"package.json\")\n    return readPkg(path).then(body => ({\n        taskList: Object.keys(body.scripts || {}),\n        packageInfo: {path, body},\n    }))\n}\n","/home/travis/build/npmtest/node-npmtest-npm-run-all/node_modules/npm-run-all/lib/run-tasks.js":"/**\n * @module run-tasks-in-parallel\n * @author Toru Nagashima\n * @copyright 2015 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n\"use strict\"\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst NpmRunAllError = require(\"./npm-run-all-error\")\nconst runTask = require(\"./run-task\")\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Remove the given value from the array.\n * @template T\n * @param {T[]} array - The array to remove.\n * @param {T} x - The item to be removed.\n * @returns {void}\n */\nfunction remove(array, x) {\n    const index = array.indexOf(x)\n    if (index !== -1) {\n        array.splice(index, 1)\n    }\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * Run npm-scripts of given names in parallel.\n *\n * If a npm-script exited with a non-zero code, this aborts other all npm-scripts.\n *\n * @param {string} tasks - A list of npm-script name to run in parallel.\n * @param {object} options - An option object.\n * @returns {Promise} A promise object which becomes fullfilled when all npm-scripts are completed.\n * @private\n */\nmodule.exports = function runTasks(tasks, options) {\n    return new Promise((resolve, reject) => {\n        if (tasks.length === 0) {\n            resolve([])\n            return\n        }\n\n        const results = tasks.map(task => ({name: task, code: undefined}))\n        const queue = tasks.map((task, index) => ({name: task, index}))\n        const promises = []\n        let error = null\n        let aborted = false\n\n        /**\n         * Done.\n         * @returns {void}\n         */\n        function done() {\n            if (error == null) {\n                resolve(results)\n            }\n            else {\n                reject(error)\n            }\n        }\n\n        /**\n         * Aborts all tasks.\n         * @returns {void}\n         */\n        function abort() {\n            if (aborted) {\n                return\n            }\n            aborted = true\n\n            if (promises.length === 0) {\n                done()\n            }\n            else {\n                promises.forEach(p => p.abort())\n                Promise.all(promises).then(done, reject)\n            }\n        }\n\n        /**\n         * Runs a next task.\n         * @returns {void}\n         */\n        function next() {\n            if (aborted) {\n                return\n            }\n            if (queue.length === 0) {\n                if (promises.length === 0) {\n                    done()\n                }\n                return\n            }\n            const task = queue.shift()\n            const promise = runTask(task.name, options)\n\n            promises.push(promise)\n            promise.then(\n                (result) => {\n                    remove(promises, promise)\n                    if (aborted) {\n                        return\n                    }\n\n                    // Save the result.\n                    results[task.index].code = result.code\n\n                    // Aborts all tasks if it's an error.\n                    if (result.code) {\n                        error = new NpmRunAllError(result, results)\n                        if (!options.continueOnError) {\n                            abort()\n                            return\n                        }\n                    }\n\n                    // Aborts all tasks if options.race is true.\n                    if (options.race && !result.code) {\n                        abort()\n                        return\n                    }\n\n                    // Call the next task.\n                    next()\n                },\n                (thisError) => {\n                    remove(promises, promise)\n                    if (!options.continueOnError || options.race) {\n                        error = thisError\n                        abort()\n                        return\n                    }\n                    next()\n                }\n            )\n        }\n\n        const max = options.maxParallel\n        const end = (typeof max === \"number\" && max > 0)\n            ? Math.min(tasks.length, max)\n            : tasks.length\n        for (let i = 0; i < end; ++i) {\n            next()\n        }\n    })\n}\n","/home/travis/build/npmtest/node-npmtest-npm-run-all/node_modules/npm-run-all/lib/npm-run-all-error.js":"/**\n * @module npm-run-all-error\n * @author Toru Nagashima\n * @copyright 2016 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n\"use strict\"\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * Error object with some additional info.\n */\nmodule.exports = class NpmRunAllError extends Error {\n    /**\n     * Constructor.\n     *\n     * @param {{name: string, code: number}} causeResult -\n     *      The result item of the npm-script which causes an error.\n     * @param {Array.<{name: string, code: (number|undefined)}>} allResults -\n     *      All result items of npm-scripts.\n     */\n    constructor(causeResult, allResults) {\n        super(`\"${causeResult.task}\" exited with ${causeResult.code}.`)\n\n        /**\n         * The name of a npm-script which exited with a non-zero code.\n         * @type {string}\n         */\n        this.name = causeResult.name\n\n        /**\n         * The code of a npm-script which exited with a non-zero code.\n         * This can be `undefined`.\n         * @type {number}\n         */\n        this.code = causeResult.code\n\n        /**\n         * All result items of npm-scripts.\n         * @type {Array.<{name: string, code: (number|undefined)}>}\n         */\n        this.results = allResults\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-npm-run-all/node_modules/npm-run-all/lib/run-task.js":"/**\n * @module run-task\n * @author Toru Nagashima\n * @copyright 2015 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n\"use strict\"\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst path = require(\"path\")\nconst chalk = require(\"chalk\")\nconst parseArgs = require(\"shell-quote\").parse\nconst padEnd = require(\"string.prototype.padend\")\nconst createHeader = require(\"./create-header\")\nconst createPrefixTransform = require(\"./create-prefix-transform-stream\")\nconst spawn = require(\"./spawn\")\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst colors = [chalk.cyan, chalk.green, chalk.magenta, chalk.yellow, chalk.red]\n\n/**\n * Select a color from given task name.\n *\n * @param {string} taskName - The task name.\n * @returns {function} A colorize function that provided by `chalk`\n */\nfunction selectColor(taskName) {\n    let hash = 0\n\n    for (const i in taskName) {\n        hash = ((hash << 5) - hash) + taskName.charCodeAt(i)\n        hash |= 0\n    }\n\n    return colors[Math.abs(hash) % colors.length]\n}\n\n/**\n * Wraps stdout/stderr with a transform stream to add the task name as prefix.\n *\n * @param {string} taskName - The task name.\n * @param {stream.Writable} source - An output stream to be wrapped.\n * @param {object} labelState - An label state for the transform stream.\n * @returns {stream.Writable} `source` or the created wrapped stream.\n */\nfunction wrapLabeling(taskName, source, labelState) {\n    if (source == null || !labelState.enabled) {\n        return source\n    }\n\n    const label = padEnd(taskName, labelState.width)\n    const color = source.isTTY ? selectColor(taskName) : (x) => x\n    const prefix = color(`[${label}] `)\n    const stream = createPrefixTransform(prefix, labelState)\n\n    stream.pipe(source)\n\n    return stream\n}\n\n/**\n * Converts a given stream to an option for `child_process.spawn`.\n *\n * @param {stream.Readable|stream.Writable|null} stream - An original stream to convert.\n * @param {process.stdin|process.stdout|process.stderr} std - A standard stream for this option.\n * @returns {string|stream.Readable|stream.Writable} An option for `child_process.spawn`.\n */\nfunction detectStreamKind(stream, std) {\n    return (\n        stream == null ? \"ignore\" :\n        // `|| !std.isTTY` is needed for the workaround of https://github.com/nodejs/node/issues/5620\n        stream !== std || !std.isTTY ? \"pipe\" :\n        /* else */ stream\n    )\n}\n\n//------------------------------------------------------------------------------\n// Interface\n//------------------------------------------------------------------------------\n\n/**\n * Run a npm-script of a given name.\n * The return value is a promise which has an extra method: `abort()`.\n * The `abort()` kills the child process to run the npm-script.\n *\n * @param {string} task - A npm-script name to run.\n * @param {object} options - An option object.\n * @param {stream.Readable|null} options.stdin -\n *   A readable stream to send messages to stdin of child process.\n *   If this is `null`, ignores it.\n *   If this is `process.stdin`, inherits it.\n *   Otherwise, makes a pipe.\n * @param {stream.Writable|null} options.stdout -\n *   A writable stream to receive messages from stdout of child process.\n *   If this is `null`, cannot send.\n *   If this is `process.stdout`, inherits it.\n *   Otherwise, makes a pipe.\n * @param {stream.Writable|null} options.stderr -\n *   A writable stream to receive messages from stderr of child process.\n *   If this is `null`, cannot send.\n *   If this is `process.stderr`, inherits it.\n *   Otherwise, makes a pipe.\n * @param {string[]} options.prefixOptions -\n *   An array of options which are inserted before the task name.\n * @param {object} options.labelState - A state object for printing labels.\n * @param {boolean} options.printName - The flag to print task names before running each task.\n * @returns {Promise}\n *   A promise object which becomes fullfilled when the npm-script is completed.\n *   This promise object has an extra method: `abort()`.\n * @private\n */\nmodule.exports = function runTask(task, options) {\n    let cp = null\n    const promise = new Promise((resolve, reject) => {\n        const stdin = options.stdin\n        const stdout = wrapLabeling(task, options.stdout, options.labelState)\n        const stderr = wrapLabeling(task, options.stderr, options.labelState)\n        const stdinKind = detectStreamKind(stdin, process.stdin)\n        const stdoutKind = detectStreamKind(stdout, process.stdout)\n        const stderrKind = detectStreamKind(stderr, process.stderr)\n        const spawnOptions = {stdio: [stdinKind, stdoutKind, stderrKind]}\n\n        // Print task name.\n        if (options.printName && stdout != null) {\n            stdout.write(createHeader(\n                task,\n                options.packageInfo,\n                options.stdout.isTTY\n            ))\n        }\n\n        if (path.extname(options.npmPath || \"a.js\") === \".js\") {\n            const npmPath = options.npmPath || process.env.npm_execpath  //eslint-disable-line no-process-env\n            const execPath = npmPath ? process.execPath : \"npm\"\n            const spawnArgs = [].concat(\n                npmPath ? [npmPath, \"run\"] : [\"run\"],\n                options.prefixOptions,\n                parseArgs(task)\n            )\n\n            // Execute.\n            cp = spawn(execPath, spawnArgs, spawnOptions)\n        }\n        else {\n            const execPath = options.npmPath\n            const spawnArgs = [].concat(\n                [\"run\"],\n                options.prefixOptions,\n                parseArgs(task)\n            )\n\n            // Execute.\n            cp = spawn(execPath, spawnArgs, spawnOptions)\n        }\n\n        // Piping stdio.\n        if (stdinKind === \"pipe\") {\n            stdin.pipe(cp.stdin)\n        }\n        if (stdoutKind === \"pipe\") {\n            cp.stdout.pipe(stdout, {end: false})\n        }\n        if (stderrKind === \"pipe\") {\n            cp.stderr.pipe(stderr, {end: false})\n        }\n\n        // Register\n        cp.on(\"error\", (err) => {\n            cp = null\n            reject(err)\n        })\n        cp.on(\"close\", (code) => {\n            cp = null\n            resolve({task, code})\n        })\n    })\n\n    promise.abort = function abort() {\n        if (cp != null) {\n            cp.kill()\n            cp = null\n        }\n    }\n\n    return promise\n}\n","/home/travis/build/npmtest/node-npmtest-npm-run-all/node_modules/npm-run-all/lib/create-header.js":"/**\n * @module create-header\n * @author Toru Nagashima\n * @copyright 2016 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n\"use strict\"\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst chalk = require(\"chalk\")\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * Creates the header text for a given task.\n *\n * @param {string} nameAndArgs - A task name and arguments.\n * @param {object} packageInfo - A package.json's information.\n * @param {object} packageInfo.body - A package.json's JSON object.\n * @param {string} packageInfo.path - A package.json's file path.\n * @param {boolean} isTTY - The flag to color the header.\n * @returns {string} The header of a given task.\n */\nmodule.exports = function createHeader(nameAndArgs, packageInfo, isTTY) {\n    if (!packageInfo) {\n        return `\\n> ${nameAndArgs}\\n\\n`\n    }\n\n    const index = nameAndArgs.indexOf(\" \")\n    const name = (index === -1) ? nameAndArgs : nameAndArgs.slice(0, index)\n    const args = (index === -1) ? \"\" : nameAndArgs.slice(index + 1)\n    const packageName = packageInfo.body.name\n    const packageVersion = packageInfo.body.version\n    const scriptBody = packageInfo.body.scripts[name]\n    const packagePath = packageInfo.path\n    const color = isTTY ? chalk.styles.gray : {open: \"\", close: \"\"}\n\n    return `\n${color.open}> ${packageName}@${packageVersion} ${name} ${packagePath}${color.close}\n${color.open}> ${scriptBody} ${args}${color.close}\n\n`\n}\n","/home/travis/build/npmtest/node-npmtest-npm-run-all/node_modules/npm-run-all/lib/create-prefix-transform-stream.js":"/**\n * @module create-prefix-transform-stream\n * @author Toru Nagashima\n * @copyright 2016 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n\"use strict\"\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst stream = require(\"stream\")\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst ALL_BR = /\\n/g\n\n/**\n * The transform stream to insert a specific prefix.\n *\n * Several streams can exist for the same output stream.\n * This stream will insert the prefix if the last output came from other instance.\n * To do that, this stream is using a shared state object.\n *\n * @private\n */\nclass PrefixTransform extends stream.Transform {\n    /**\n     * @param {string} prefix - A prefix text to be inserted.\n     * @param {object} state - A state object.\n     * @param {string} state.lastPrefix - The last prefix which is printed.\n     * @param {boolean} state.lastIsLinebreak -The flag to check whether the last output is a line break or not.\n     */\n    constructor(prefix, state) {\n        super()\n\n        this.prefix = prefix\n        this.state = state\n    }\n\n    /**\n     * Transforms the output chunk.\n     *\n     * @param {string|Buffer} chunk - A chunk to be transformed.\n     * @param {string} encoding - The encoding of the chunk.\n     * @param {function} callback - A callback function that is called when done.\n     * @returns {void}\n     */\n    _transform(chunk, encoding, callback) {\n        const prefix = this.prefix\n        const nPrefix = `\\n${prefix}`\n        const state = this.state\n        const firstPrefix =\n            state.lastIsLinebreak ? prefix :\n            (state.lastPrefix !== prefix) ? \"\\n\" :\n            /* otherwise */ \"\"\n        const prefixed = `${firstPrefix}${chunk}`.replace(ALL_BR, nPrefix)\n        const index = prefixed.indexOf(prefix, Math.max(0, prefixed.length - prefix.length))\n\n        state.lastPrefix = prefix\n        state.lastIsLinebreak = (index !== -1)\n\n        callback(null, (index !== -1) ? prefixed.slice(0, index) : prefixed)\n    }\n}\n\n//------------------------------------------------------------------------------\n// Public API\n//------------------------------------------------------------------------------\n\n/**\n * Create a transform stream to insert the specific prefix.\n *\n * Several streams can exist for the same output stream.\n * This stream will insert the prefix if the last output came from other instance.\n * To do that, this stream is using a shared state object.\n *\n * @param {string} prefix - A prefix text to be inserted.\n * @param {object} state - A state object.\n * @param {string} state.lastPrefix - The last prefix which is printed.\n * @param {boolean} state.lastIsLinebreak -The flag to check whether the last output is a line break or not.\n * @returns {stream.Transform} The created transform stream.\n */\nmodule.exports = function createPrefixTransform(prefix, state) {\n    return new PrefixTransform(prefix, state)\n}\n","/home/travis/build/npmtest/node-npmtest-npm-run-all/node_modules/npm-run-all/lib/spawn.js":"/**\n * @module spawn\n * @author Toru Nagashima\n * @copyright 2015 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n\"use strict\"\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * Launches a new process with the given command.\n * This is {@link ./spawn-posix.js:spawn} or {@link ./spawn-win32.js:spawn}\n * @private\n */\nmodule.exports = require(\n    process.platform === \"win32\" ? \"./spawn-win32\" : \"./spawn-posix\"\n)\n","/home/travis/build/npmtest/node-npmtest-npm-run-all/node_modules/npm-run-all/lib/spawn-posix.js":"/**\n * @module spawn-posix\n * @author Toru Nagashima\n * @copyright 2015 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n\"use strict\"\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst crossSpawn = require(\"cross-spawn\")\nconst getDescendentProcessInfo = require(\"ps-tree\")\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Kills the new process and its sub processes.\n * @this ChildProcess\n * @returns {void}\n */\nfunction kill() {\n    getDescendentProcessInfo(this.pid, (err, descendent) => {\n        if (err) {\n            return\n        }\n\n        descendent.forEach(child => {\n            try {\n                process.kill(child.PID)\n            }\n            catch (_err) {\n                // ignore.\n            }\n        })\n    })\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * Launches a new process with the given command.\n * This is almost same as `child_process.spawn`.\n *\n * This returns a `ChildProcess` instance.\n * `kill` method of the instance kills the new process and its sub processes.\n *\n * @param {string} command - The command to run.\n * @param {string[]} args - List of string arguments.\n * @param {object} options - Options.\n * @returns {ChildProcess} A ChildProcess instance of new process.\n * @private\n */\nmodule.exports = function spawn(command, args, options) {\n    const child = crossSpawn(command, args, options)\n    child.kill = kill\n\n    return child\n}\n","/home/travis/build/npmtest/node-npmtest-npm-run-all/node_modules/npm-run-all/lib/spawn-win32.js":"/**\n * @module spawn-win32\n * @author Toru Nagashima\n * @copyright 2015 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n\"use strict\"\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst crossSpawn = require(\"cross-spawn\")\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Kills the new process and its sub processes forcibly.\n * @this ChildProcess\n * @returns {void}\n */\nfunction kill() {\n    crossSpawn(\"taskkill\", [\"/F\", \"/T\", \"/PID\", this.pid])\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * Launches a new process with the given command.\n * This is almost same as `child_process.spawn`.\n *\n * This returns a `ChildProcess` instance.\n * `kill` method of the instance kills the new process and its sub processes forcibly.\n *\n * @param {string} command - The command to run.\n * @param {string[]} args - List of string arguments.\n * @param {object} options - Options.\n * @returns {ChildProcess} A ChildProcess instance of new process.\n * @private\n */\nmodule.exports = function spawn(command, args, options) {\n    const child = crossSpawn(command, args, options)\n    child.kill = kill\n\n    return child\n}\n"}